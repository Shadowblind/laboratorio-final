name: ci-cd-devsecops
run-name: ${{ github.actor }} Workflow SAST, SCA & Imagen Vuln 🚀
on:
  push:
    branches:
      - develop 

jobs:
  AnalisisDeSeguridad:
    runs-on: "ubuntu-latest"
    steps:

    # -- Informacion del proyecto general

      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is  ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Debug branch name
        run: |
          echo "Full ref: $GITHUB_REF"
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          echo "Branch name: $BRANCH_NAME"

    # -- Clonacion del proyecto

      - name: Checkout code
        uses: actions/checkout@v3 

    # -- Analisis statico del codigo

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  
        with:
          args:
            -Dsonar.projectKey="shadowblind_laboratorio-final"
            -Dsonar.organization="shadowblind"
            -Dsonar.branch.name=${{ github.ref_name }}
          projectBaseDir: .
      - name: Check vulnerabilities and fail pipeline on critical/high/medium issues
        run: |
          # Obtener el informe de calidad y verificar las vulnerabilidades
          critical_vulns=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/issues/search?componentKeys=shadowblind_laboratorio-final&types=VULNERABILITY&severity=CRITICAL&severity=HIGH&severity=MEDIUM" | jq '.total')
          if [ "$critical_vulns" -gt 0 ]; then
            echo "Found $critical_vulns critical/high/medium vulnerabilities."
            exit 0 # Falla el pipeline
          else
            echo "No critical/high/medium vulnerabilities found."
          fi

    # -- Preparacion del proyecto node

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' 

      - name: Install Dependencies
        run: npm install

    # -- Analsisi de librerias y dependencias

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'nodejs-project'
          path: '.' 
          format: 'ALL' 
          out: 'reports' 
          args: >
            --disableCentral
            --enableRetired
            

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v3
        with:
          name: Dependency-Check-Report
          path: reports/dependency-check-report.html


      # -- Build y analisis de imagenes.
      
      - name: Build an image from Dockerfile
        run: docker build -t docker.io/shadowblind/app-devsecops:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'docker.io/shadowblind/app-devsecops:${{ github.sha }}'
          format: 'json'
          output: 'trivy-report.json'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Fail on Trivy Vulnerabilities
        run: |
          critical=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="CRITICAL")] | length' trivy-report.json)
          high=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="HIGH")] | length' trivy-report.json)
          if [ "$critical" -gt 0 ] || [ "$high" -gt 0 ]; then
            echo "Found $critical critical and $high high vulnerabilities."
            exit 0
          else
            echo "No critical or high vulnerabilities found."
          fi
        shell: bash